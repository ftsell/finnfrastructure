# See reference: https://prometheus.io/docs/prometheus/latest/configuration/configuration/

global:
  scrape_interval: 30s

remote_write:
  - name: monitoring.ftsell.de
    url: https://prometheus.monitoring.ftsell.de/api/v1/write
    basic_auth:
      username: k8s-prometheus
      password_file: /etc/prometheus/remote_access.passwd.txt

remote_read:
  - name: monitoring.ftsell.de
    url: https://prometheus.monitoring.ftsell.de/api/v1/read
    basic_auth:
      username: k8s-prometheus
      password_file: /etc/prometheus/remote_access.passwd.txt

scrape_configs:
  # Scrape configs are inspired from:
  #   https://github.com/prometheus/prometheus/blob/main/documentation/examples/prometheus-kubernetes.yml

  # scrape Kubernetes ApiServer metrics
  - job_name: k8s-apiservers
    scheme: https
    tls_config:
      ca_file: /var/run/secrets/kubernetes.io/serviceaccount/ca.crt
    authorization:
      credentials_file: /var/run/secrets/kubernetes.io/serviceaccount/token
    kubernetes_sd_configs:
      - role: endpoints
    relabel_configs:
      - source_labels:
          [
            __meta_kubernetes_namespace,
            __meta_kubernetes_service_name,
            __meta_kubernetes_endpoint_port_name,
          ]
        action: keep
        regex: default;kubernetes;https

  # scrape kubelet daemons
  - job_name: k8s-kubelet
    scheme: https
    tls_config:
      # prometheus generates a $ip target by default but the ip address is not included in the server cert
      ca_file: /var/run/secrets/kubernetes.io/serviceaccount/ca.crt
      insecure_skip_verify: true
    authorization:
      credentials_file: /var/run/secrets/kubernetes.io/serviceaccount/token
    kubernetes_sd_configs:
      - role: node
    relabel_configs:
      # map all node labels to prometheus labels
      - action: labelmap
        regex: __meta_kubernetes_node_label_(.+)

  # scrape daemonsets
  - job_name: k8s-daemonset
    scheme: http
    tls_config:
      ca_file: /var/run/secrets/kubernetes.io/serviceaccount/ca.crt
    authorization:
      credentials_file: /var/run/secrets/kubernetes.io/serviceaccount/token
    kubernetes_sd_configs:
      - role: pod
    relabel_configs:
      # only scrape pods which are controlled by DaemonSets
      - source_labels: [ __meta_kubernetes_pod_controller_kind ]
        regex: DaemonSet
        action: keep
      # only scrape pods with prometheus.io/scrape=true annotation
      - source_labels: [ __meta_kubernetes_pod_annotation_prometheus_io_scrape ]
        regex: true
        action: keep
      # allow reconfiguration of /metrics path via prometheus.io/metric_path annotation
      - source_labels: [ __meta_kubernetes_pod_annotation_prometheus_io_metric_path ]
        action: replace
        target_label: __metrics_path__
        regex: (.+)
      # allow reconfiguration to scrape only a single desired port via prometheus.io/port annotation
      - source_labels: [ __address__, __meta_kubernetes_pod_annotation_prometheus_io_port ]
        action: replace
        regex: ([^:]+)(?::\d+)?;(\d+)
        replacement: $1:$2
        target_label: __address__
      # allow reconfiguration of http schema used during scraping via prometheus.io/scrape_scheme annotation
      - source_labels: [ __meta_kubernetes_pod_annotation_prometheus_io_scrape_scheme ]
        action: replace
        target_label: __scheme__
        regex: (https?)
      # map all pod labels and some special metadata to prometheus labels
      - action: labelmap
        regex: __meta_kubernetes_pod_label_(.+)
      - source_labels: [ __meta_kubernetes_namespace ]
        action: replace
        target_label: namespace
      - source_labels: [ __meta_kubernetes_pod_name ]
        action: replace
        target_label: pod
      - source_labels: [ __meta_kubernetes_pod_node_name ]
        action: replace
        target_label: node
      # overwrite instance label to node this daemonset pod is running on
      - source_labels: [ __meta_kubernetes_pod_node_name ]
        action: replace
        target_label: instance
      # drop controller-revision-hash label because it hinders proper grouping of labels
      - regex: controller_revision_hash
        action: labeldrop

  # scrape endpoints of services with corresponding annotations
  - job_name: k8s-services
    kubernetes_sd_configs:
      - role: endpointslice
    relabel_configs:
      # only scrape services with prometheus.io/scrape=true annotation
      - source_labels: [ __meta_kubernetes_service_annotation_prometheus_io_scrape ]
        regex: true
        action: keep
      # allow reconfiguration of /metrics path via prometheus.io/metric_path annotation
      - source_labels: [ __meta_kubernetes_service_annotation_prometheus_io_metric_path ]
        action: replace
        target_label: __metrics_path__
        regex: (.+)
      # allow reconfiguration to scrape only a single desired port via prometheus.io/port annotation
      - source_labels: [ __address__, __meta_kubernetes_service_annotation_prometheus_io_port ]
        action: replace
        regex: ([^:]+)(?::\d+)?;(\d+)
        replacement: $1:$2
        target_label: __address__
      # allow reconfiguration of http schema used during scraping via prometheus.io/scrape_scheme annotation
      - source_labels: [ __meta_kubernetes_service_annotation_prometheus_io_scrape_scheme ]
        action: replace
        target_label: __scheme__
        regex: (https?)
      # map all service labels and some special metadata to prometheus labels
      - action: labelmap
        regex: __meta_kubernetes_service_label_(.+)
      - source_labels: [ __meta_kubernetes_namespace ]
        action: replace
        target_label: namespace
      - source_labels: [ __meta_kubernetes_service_name ]
        action: replace
        target_label: service

  # scrape pods (that are not already scraped by daemonsets)
  - job_name: k8s-pods
    scheme: http
    tls_config:
      ca_file: /var/run/secrets/kubernetes.io/serviceaccount/ca.crt
    authorization:
      credentials_file: /var/run/secrets/kubernetes.io/serviceaccount/token
    kubernetes_sd_configs:
      - role: pod
    relabel_configs:
      # only scrape pods which are not controlled by DaemonSets
      - source_labels: [ __meta_kubernetes_pod_controller_kind ]
        regex: DaemonSet
        action: drop
      # only scrape pods with prometheus.io/scrape=true annotation
      - source_labels: [ __meta_kubernetes_pod_annotation_prometheus_io_scrape ]
        regex: true
        action: keep
      # allow reconfiguration of /metrics path via prometheus.io/metric_path annotation
      - source_labels: [ __meta_kubernetes_pod_annotation_prometheus_io_metric_path ]
        action: replace
        target_label: __metrics_path__
        regex: (.+)
      # allow reconfiguration to scrape only a single desired port via prometheus.io/port annotation
      - source_labels: [ __address__, __meta_kubernetes_pod_annotation_prometheus_io_port ]
        action: replace
        regex: ([^:]+)(?::\d+)?;(\d+)
        replacement: $1:$2
        target_label: __address__
      # allow reconfiguration of http schema used during scraping via prometheus.io/scrape_scheme annotation
      - source_labels: [ __meta_kubernetes_pod_annotation_prometheus_io_scrape_scheme ]
        action: replace
        target_label: __scheme__
        regex: (https?)
      # map all pod labels and some special metadata to prometheus labels
      - action: labelmap
        regex: __meta_kubernetes_pod_label_(.+)
      - source_labels: [ __meta_kubernetes_namespace ]
        action: replace
        target_label: namespace
      - source_labels: [ __meta_kubernetes_pod_name ]
        action: replace
        target_label: pod
      # drop controller-revision-hash label because it hinders proper grouping of labels
      - regex: controller_revision_hash
        action: labeldrop
